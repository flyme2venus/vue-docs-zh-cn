# .github/workflows/release.yml

name: Build Windows Desktop App

# 触发器：当有代码推送到 main 分支时，或手动触发时运行
on:
  push:
    branches: [ "main", "master" ] # 根据你的主分支名修改
  workflow_dispatch: # 允许手动从 Actions 页面触发

jobs:
  build-tauri:
    # 策略：不因其他 job 失败而取消，超时设置为 60 分钟
    strategy:
      fail-fast: false
      
    # 运行环境：必须使用 Windows Runner
    runs-on: windows-latest

    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 安装 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # 3. 设置 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8 # 或者你使用的 pnpm 版本

      # 4. 【推荐的修改】使用官方 Action 安装 Tauri 依赖和 CLI
      # 这个 Action 会处理 Rust 工具链、WebView2、NSIS (用于打包) 以及 Tauri CLI 的安装
      - name: Install Tauri dependencies and CLI
        uses: tauri-apps/tauri-action@v0
        with:
          # 你可以在这里指定一个固定的 tauri-cli 版本
          cliVersion: 1

      # 5. 安装前端依赖
      # pnpm install 会读取 package.json 并安装所有项目所需的前端库
      - name: Install frontend dependencies
        run: pnpm install

      # 6. 构建 Tauri 应用
      # 使用 `pnpm exec` 可以确保即使 tauri-cli 安装在本地 node_modules 中也能被正确执行
      - name: Build Tauri application
        run: pnpm exec tauri build --verbose
        env:
          # GITHUB_TOKEN 是自动可用的，用于和 GitHub API 交互
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 7. 上传构建产物
      # 将打包好的 .msi 安装文件作为 "Artifact" 上传，方便下载
      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: VueDocs-Windows-Installer
          # 路径通配符可以匹配版本号不确定的文件名
          # 请确保这个路径和你的 tauri.conf.json 中的输出路径一致
          path: src-tauri/target/release/bundle/msi/*.msi

