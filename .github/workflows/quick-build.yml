name: Windows Build

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - '.vitepress/**'
      - 'src-tauri/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/quick-build.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - '.vitepress/**'
      - 'src-tauri/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/quick-build.yml'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  quick-build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9

    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: x86_64-pc-windows-msvc

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
        cache-all-crates: true

    - name: Install frontend dependencies
      run: pnpm install --frozen-lockfile

    - name: Build frontend
      run: pnpm build

    - name: Verify frontend build
      run: |
        if (!(Test-Path ".vitepress/dist")) {
          Write-Error "Frontend build failed"
          exit 1
        }

    - name: Build Tauri executable (no bundle)
      run: |
        cd src-tauri
        if (Test-Path "Cargo.lock") { Remove-Item "Cargo.lock" -Force }
        if (Test-Path "target") { Remove-Item "target" -Recurse -Force }
        cd ..
        pnpm tauri build --target x86_64-pc-windows-msvc --no-bundle
        if (!(Test-Path "src-tauri/target/x86_64-pc-windows-msvc/release/vue-docs-zh-cn.exe")) {
          Write-Error "Executable build failed"
          exit 1
        }

    - name: Build Tauri with NSIS installer
      run: |
        pnpm tauri build --target x86_64-pc-windows-msvc --bundles nsis
      continue-on-error: true

    - name: Create portable package
      run: |
        $sourceExe = "src-tauri/target/x86_64-pc-windows-msvc/release/vue-docs-zh-cn.exe"
        $portableDir = "vue-docs-portable"
        New-Item -ItemType Directory -Path $portableDir -Force
        Copy-Item $sourceExe "$portableDir/Vue文档.exe"
        "Vue.js Documentation Desktop App" | Out-File -FilePath "$portableDir/README.txt" -Encoding UTF8
        Compress-Archive -Path "$portableDir/*" -DestinationPath "vue-docs-portable-${{ github.sha }}.zip"
        Write-Host "Portable package created"

    - name: Upload executable and installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-build-${{ github.sha }}
        path: |
          src-tauri/target/x86_64-pc-windows-msvc/release/vue-docs-zh-cn.exe
          src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe
        retention-days: 30

    - name: Upload portable package
      uses: actions/upload-artifact@v4
      with:
        name: windows-portable-${{ github.sha }}
        path: vue-docs-portable-${{ github.sha }}.zip
        retention-days: 30

    - name: Build summary
      run: |
        echo "Build completed" >> $env:GITHUB_STEP_SUMMARY
